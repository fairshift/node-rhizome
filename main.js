

// The beginning of this file should actually be generated by parsing README.md 
//(providing default initiation constant) - by a documentation-first paradigm

import { 
  nodeState_gql 
} from './db.augmentation.types'

import { generateResponder } from './db.generator'


export default function initRhizome(
  namespacesAugmentations
){

  // Check if Sql schema exists as declared
  // >> generate tables , generate new fields

  return {
  	...apiFunctions
  }
}


export const toRhizome = (args) => {

	var { namespace, jsonObj, array } = args

	if(typeof array !== 'array'){

	}
}


//
// Composition of inputs
// ... some clues on data input, points where rhizome() can integrate and compromises that follow
//
//  - timestamps are defined at time of input
//		-> use toRhizome() for new data at input
//		-> create a remapping schema at output (for existing data)
//
//  - there's no guarantee that output will match inputs, by structure or content 
// 	 (transformations may occur, because of specific display forms and permissions)
//	 	-> join outputs from multiple functions
//	 	-> integrate rhizome() directly at database and transform later
//
/*

At load-time ; On-demand
	- remapping schemas -> parse
	- parser Trie(s)

API function output object(s)
	- namespace
	- data object (js / json)

*/